{"version":3,"sources":["assets/logo.jpg","organisms/navbar/NavBar.tsx","hooks/useColorsCounter.ts","organisms/resultsList/ResultsList.tsx","atoms/button/Button.tsx","atoms/counter/Counter.tsx","screens/newSection/NewSection.tsx","App.tsx","index.tsx"],"names":["NavBar","useState","userName","setUserName","useEffect","userNameStorage","localStorage","getItem","randomInt","Math","floor","random","generateUserName","setItem","className","src","image","alt","onClick","Swal","fire","title","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","cancelButtonText","showLoaderOnConfirm","then","result","isConfirmed","value","icon","useColorsCounter","counter","initialState","color","quantity","range","ResultsList","dbCounter","counterClick","colorClicked","map","e","isColorWhite","style","backgroundColor","undefined","height","width","marginLeft","borderColor","borderWidth","borderStyle","Button","rest","disabled","Counter","styleCounter","colorCounter","opacity","NewSection","setCounter","status","stopCounter","setStopCounter","dbStop","setdbStop","viewResults","setViewResults","fakeSecondsClicks","setFakeSecondsClicks","colorSelected","stopCounterStorage","dbStopStorage","values","JSON","parse","idInterval","setInterval","count","clearInterval","fakeHandleClick","db","stringify","text","cancelButtonColor","confirmButtonColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01d1fca4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.61cd6ce2.jpg\";","import React, { useEffect, useState } from 'react';\r\nimport './navbar.css';\r\nimport image from '../../assets/logo.jpg';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst NavBar: React.FC = () => {\r\n  const [userName, setUserName] = useState('');\r\n\r\n  /* Maneja el nombre del usuario, busca en el storage y si no tiene setea uno random */\r\n  useEffect(() => {\r\n    const userNameStorage = localStorage.getItem('user');\r\n    if (userNameStorage) {\r\n      setUserName(userNameStorage);\r\n    } else {\r\n      const randomInt = Math.floor(Math.random() * (999 - 1 + 1)) + 1;\r\n      const generateUserName = `usuario ${randomInt}`;\r\n      setUserName(generateUserName);\r\n      localStorage.setItem('user', generateUserName);\r\n    }\r\n  }, []);\r\n\r\n  const handleClickUser = () => {\r\n    Swal.fire({\r\n      title: 'Ingrese un nombre',\r\n      input: 'text',\r\n      inputAttributes: {\r\n        autocapitalize: 'off',\r\n      },\r\n      showCancelButton: true,\r\n      confirmButtonText: 'Confirmar',\r\n      cancelButtonText: 'Cancelar',\r\n      showLoaderOnConfirm: true,\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        setUserName(result.value);\r\n        localStorage.setItem('user', result.value);\r\n        Swal.fire({\r\n          title: `${result.value} has cambiado tu nombre exitosamente.`,\r\n          icon: 'success',\r\n        });\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"container-navbar\">\r\n      <img src={image} alt=\"Logo reddit\" className=\"image-navbar\" />\r\n      <input className=\"input-navbar\" />\r\n      <h3 className=\"user-navbar\" onClick={handleClickUser}>\r\n        {userName}\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","const useColorsCounter = (counter: number) => {\r\n  let color = '';\r\n  if (counter >= 52) {\r\n    color = 'purple';\r\n  } else if (counter >= 42) {\r\n    color = 'blue';\r\n  } else if (counter >= 32) {\r\n    color = 'green';\r\n  } else if (counter >= 22) {\r\n    color = 'yellow';\r\n  } else if (counter >= 12) {\r\n    color = 'orange';\r\n  } else if (counter > 0) {\r\n    color = 'red';\r\n  } else {\r\n    color = 'grey';\r\n  }\r\n  return color;\r\n};\r\nexport default useColorsCounter;\r\n","import React from 'react';\r\nimport useColorsCounter from '../../hooks/useColorsCounter';\r\nimport './resultsList.css';\r\n\r\ntype Icolors =\r\n  | 'purple'\r\n  | 'blue'\r\n  | 'green'\r\n  | 'yellow'\r\n  | 'orange'\r\n  | 'red'\r\n  | 'grey';\r\n\r\nexport type IResultListData = Array<{\r\n  color: Icolors;\r\n  quantity: number;\r\n  range: string;\r\n}>;\r\n\r\nexport const initialState: IResultListData = [\r\n  { color: 'purple', quantity: 0, range: '60 - 52' },\r\n  { color: 'blue', quantity: 0, range: '51 - 42' },\r\n  { color: 'green', quantity: 0, range: '41 - 32' },\r\n  { color: 'yellow', quantity: 0, range: '31 - 22' },\r\n  { color: 'orange', quantity: 0, range: '21 - 12' },\r\n  { color: 'red', quantity: 0, range: '11 - 0' },\r\n  { color: 'grey', quantity: 0, range: 'No click' },\r\n];\r\n\r\ninterface IResultsList {\r\n  dbCounter?: IResultListData;\r\n  counterClick?: number;\r\n}\r\nconst ResultsList: React.FC<IResultsList> = ({\r\n  dbCounter = initialState,\r\n  counterClick,\r\n}) => {\r\n  const colorClicked = useColorsCounter(counterClick ?? 0);\r\n  return (\r\n    <div className=\"container-resultsList\">\r\n      <h1>Resultados acumulados:</h1>\r\n      <table>\r\n        <tr>\r\n          <th>Segundos</th>\r\n          <th>Color</th>\r\n          <th>Clicks</th>\r\n        </tr>\r\n        {dbCounter.map((e) => {\r\n          const isColorWhite =\r\n            e.color === 'blue' || e.color === 'green' || e.color === 'purple';\r\n          return (\r\n            <tr\r\n              style={{\r\n                backgroundColor: e.color,\r\n                color: isColorWhite ? 'white' : undefined,\r\n              }}\r\n            >\r\n              <td>{e.range}</td>\r\n              <td>{e.color}</td>\r\n              <td>{e.quantity}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </table>\r\n      {counterClick ? (\r\n        <div className=\"footer-text\">\r\n          <h3>\r\n            Gracias por participar, tu click se registro en el segundo{' '}\r\n            {counterClick}, tu color asignado es el{' '}\r\n          </h3>\r\n          <div\r\n            style={{\r\n              backgroundColor: colorClicked,\r\n              height: '20px',\r\n              width: '20px',\r\n              marginLeft: 12,\r\n              borderColor: 'black',\r\n              borderWidth: 1,\r\n              borderStyle: 'solid',\r\n            }}\r\n          />\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultsList;\r\n","import React, { ButtonHTMLAttributes } from 'react';\r\nimport './button.css';\r\n\r\nexport interface IButton\r\n  extends Omit<\r\n    ButtonHTMLAttributes<HTMLButtonElement>,\r\n    'className' | 'title' | 'disabled'\r\n  > {\r\n  title?: string | number;\r\n  className?: string;\r\n  disabled?: boolean;\r\n}\r\nconst Button: React.FC<IButton> = ({ title, className, disabled, ...rest }) => {\r\n  return (\r\n    <button className={`container-button ${className}`} {...rest}>\r\n      <p className=\"content-text-button\">{title}</p>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport useColorsCounter from '../../hooks/useColorsCounter';\r\nimport Button, { IButton } from '../button/Button';\r\nimport './counter.css';\r\n\r\ninterface ICounter extends IButton {\r\n  counter: number;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst Counter: React.FC<ICounter> = ({ counter, disabled, ...rest }) => {\r\n  const styleCounter: {\r\n    opacity?: number;\r\n    backgroundColor?: string;\r\n    color?: string;\r\n  } = {};\r\n\r\n  const colorCounter = useColorsCounter(counter);\r\n  styleCounter.backgroundColor = colorCounter;\r\n\r\n  if (disabled) {\r\n    styleCounter.opacity = 0.7;\r\n    styleCounter.backgroundColor = 'white';\r\n    styleCounter.color = 'black';\r\n  }\r\n  return (\r\n    <Button\r\n      style={styleCounter}\r\n      title={counter}\r\n      disabled={disabled}\r\n      className=\"counter-style\"\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button } from '../../atoms';\r\nimport Counter from '../../atoms/counter/Counter';\r\nimport useColorsCounter from '../../hooks/useColorsCounter';\r\nimport { ResultsList } from '../../organisms';\r\nimport {\r\n  initialState,\r\n  IResultListData,\r\n} from '../../organisms/resultsList/ResultsList';\r\nimport './newSection.css';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst NewSection: React.FC = () => {\r\n  const [counter, setCounter] = useState(60);\r\n\r\n  /* Estado para guardar informacion cuando se presiona el boton */\r\n  const [stopCounter, setStopCounter] = useState<{\r\n    status: boolean;\r\n    counterClick: number | undefined;\r\n  }>({ status: false, counterClick: undefined });\r\n\r\n  /* Estado que simula una base de dato para guardas las estadisticas */\r\n  const [dbStop, setdbStop] = useState<IResultListData>(initialState);\r\n\r\n  const [viewResults, setViewResults] = useState(false);\r\n\r\n  /* Estado que maneja el tiempo de los falsos clicks */\r\n  const [fakeSecondsClicks, setFakeSecondsClicks] = useState<\r\n    undefined | number\r\n  >(undefined);\r\n\r\n  /* Hooks que se usa para cambiar el color del boton en funcion del tiempo*/\r\n  const colorSelected = useColorsCounter(counter);\r\n\r\n  /* Reviso el storage para cargar informacion si hubiera almacenada */\r\n  useEffect(() => {\r\n    const stopCounterStorage = localStorage.getItem('counter');\r\n    const dbStopStorage = localStorage.getItem('dbCounter');\r\n\r\n    if (stopCounterStorage) {\r\n      const values = JSON.parse(stopCounterStorage);\r\n      setStopCounter(values);\r\n      setViewResults(values.status ? true : false);\r\n    }\r\n    if (dbStopStorage) {\r\n      const values = JSON.parse(dbStopStorage);\r\n      setdbStop(values);\r\n    }\r\n  }, []);\r\n\r\n  /* Maneja el contador, lo disminuye y simula los falsos clicks */\r\n  useEffect(() => {\r\n    const idInterval = setInterval(() => {\r\n      setCounter((count) => count - 1);\r\n    }, 1000);\r\n\r\n    if (counter <= 0) {\r\n      clearInterval(idInterval);\r\n    }\r\n    if (!fakeSecondsClicks) {\r\n      const randomInt = Math.floor(Math.random() * (60 - 1 + 1)) + 1;\r\n      setFakeSecondsClicks(randomInt);\r\n    }\r\n    if (counter === fakeSecondsClicks) {\r\n      fakeHandleClick();\r\n      setFakeSecondsClicks(undefined);\r\n    }\r\n    return () => {\r\n      clearInterval(idInterval);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [counter, stopCounter.status]);\r\n\r\n  const fakeHandleClick = () => {\r\n    const db = dbStop.map((e) => {\r\n      if (e.color === colorSelected) {\r\n        return { ...e, quantity: e.quantity + 1 };\r\n      } else {\r\n        return e;\r\n      }\r\n    });\r\n    setdbStop(db);\r\n\r\n    localStorage.setItem('dbCounter', JSON.stringify(db));\r\n    setCounter(60);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (!stopCounter.status) {\r\n      setStopCounter({ status: true, counterClick: counter });\r\n      setViewResults(false);\r\n      Swal.fire({\r\n        title: `Tu Click se registrará a los  ${counter} s.`,\r\n        text: 'Estas de acuerdo? No podrás revertir esta acción',\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonText: 'Cancelar',\r\n        confirmButtonText: 'Confirmar',\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          const db = dbStop.map((e) => {\r\n            if (e.color === colorSelected) {\r\n              return { ...e, quantity: e.quantity + 1 };\r\n            } else {\r\n              return e;\r\n            }\r\n          });\r\n          setStopCounter({ status: true, counterClick: counter });\r\n          setdbStop(db);\r\n          localStorage.setItem(\r\n            'counter',\r\n            JSON.stringify({ status: true, counterClick: counter })\r\n          );\r\n          localStorage.setItem('dbCounter', JSON.stringify(db));\r\n          setViewResults(true);\r\n          setCounter(60);\r\n          Swal.fire({\r\n            title: 'Se registró tu click, gracias por participar',\r\n            icon: 'success',\r\n          });\r\n        } else {\r\n          setStopCounter({ status: false, counterClick: undefined });\r\n        }\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container-newSection\">\r\n      <Counter\r\n        counter={counter}\r\n        onClick={handleClick}\r\n        disabled={stopCounter.status}\r\n      />\r\n\r\n      {viewResults ? (\r\n        <>\r\n          <ResultsList\r\n            dbCounter={dbStop}\r\n            counterClick={stopCounter.counterClick}\r\n          />\r\n          <Button\r\n            className=\"button-statistics\"\r\n            title={'Ocultar estadisticas'}\r\n            onClick={() => {\r\n              setViewResults(false);\r\n            }}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Button\r\n          className=\"button-statistics\"\r\n          title={'Mostrar estadisticas'}\r\n          onClick={() => {\r\n            setViewResults(true);\r\n          }}\r\n        />\r\n      )}\r\n      <h3 className=\"stop-clicks-text\" onClick={() => setFakeSecondsClicks(-1)}>\r\n        Parar simulación de clicks\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewSection;\r\n","import React from 'react';\nimport { NavBar } from './organisms';\nimport './app.css';\nimport { NewSection } from './screens';\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n      <NewSection />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}